PostgreSQL does not support an active-active setup natively because it uses a primary-replica model for replication. However, you can achieve an active-active-like setup using third-party solutions. Here are a few options:

1. BDR (Bi-Directional Replication)

Description: BDR (developed by 2ndQuadrant, now part of EDB) is one of the best solutions for multi-master replication in PostgreSQL.

Features:

True active-active replication.

Conflict resolution mechanisms.

Low replication lag.


Use Case: Distributed applications requiring multiple writable nodes.


2. pglogical (Logical Replication)

Description: Logical replication can be used for partial or selective replication and can be configured to simulate active-active replication.

Features:

Fine-grained replication (table-level).

Custom conflict resolution.


Use Case: Multi-region setups where conflict resolution is handled at the application level.


3. Citus (Sharding and Distributed Transactions)

Description: Citus (by Microsoft) is an extension for PostgreSQL that enables distributed SQL for scaling reads and writes.

Features:

Sharding and parallel queries.

Can distribute writes to multiple nodes.


Use Case: High-throughput transactional systems.


4. Bucardo (Trigger-Based Replication)

Description: Bucardo is a replication system that uses triggers for data replication.

Features:

Asynchronous replication.

Custom conflict resolution.


Use Case: Legacy systems needing minimal database modifications.


5. Patroni + Etcd + HAProxy (Failover, Not True Active-Active)

Description: Patroni manages PostgreSQL clusters and provides automated failover.

Features:

Auto failover with etcd or Consul.

Read scaling with HAProxy or PgBouncer.


Use Case: High availability with fast failover.



---

Which One to Choose?

For true active-active: Use BDR (best option) or pglogical.

For distributed workloads: Use Citus.

For legacy replication needs: Use Bucardo.

For high availability (but not active-active): Use Patroni + HAProxy.


Do you have a specific requirement, such as handling conflict resolution, high availability, or performance?



Yes, EDB Postgres Distributed (PGD) is one of the best solutions for achieving active-active replication in PostgreSQL. It is designed specifically for high availability, disaster recovery, and geographically distributed workloads.

Why Use EDB PGD for Active-Active Setup?

1. True Multi-Master Replication:

All nodes can handle both read and write operations.

Conflict resolution mechanisms ensure consistency.



2. High Availability & Fault Tolerance:

Automatic failover and self-healing clusters.

Can sustain node failures without losing availability.



3. Global Scale and Low Latency:

Optimized for geographically distributed deployments.

Reduces latency by directing queries to the nearest node.



4. Conflict Resolution:

Supports automatic conflict resolution strategies.

You can configure custom conflict resolution logic.



5. Seamless Application Integration:

Applications do not need to be modified significantly to use PGD.

Works with existing PostgreSQL tools and extensions.





---

How to Set Up EDB PGD for Active-Active

1. Install EDB PGD

Use EDB's package repositories to install PGD.

Ensure all nodes are running compatible PostgreSQL versions.



2. Initialize the Cluster

Set up multiple PostgreSQL nodes with PGD installed.

Use pgdctl or efm (Enterprise Failover Manager) to configure the cluster.



3. Configure Active-Active Replication

Enable bi-directional replication between nodes.

Define conflict resolution policies.



4. Monitor and Manage

Use EDB Postgres Enterprise Manager for monitoring.

Set up alerting and automated failover mechanisms.





---

Use Cases for EDB PGD

✅ Financial Systems → Low-latency global transactions.
✅ E-commerce & Retail → Multiple regional databases with consistent inventory.
✅ Government & Compliance → High availability for critical applications.
✅ IoT & Analytics → Distributed data ingestion and processing.


---

Is EDB PGD the Right Choice?

If you need a reliable, scalable, and officially supported active-active PostgreSQL setup, EDB PGD is one of the best options. It eliminates the complexity of DIY replication solutions and provides enterprise-grade support.

Would you like a step-by-step guide for setting up PGD in your environment?



EDB Postgres Distributed (PGD) Architecture

EDB PGD is a multi-master replication solution designed for high availability, scalability, and disaster recovery in PostgreSQL. It allows multiple nodes to function as active database instances, enabling read and write operations on all nodes while maintaining data consistency.


---

1. PGD Core Components

A. PGD Nodes (Data Nodes)

Each database instance in a PGD cluster is called a node.

Nodes can be distributed across different regions or data centers.

All nodes in the cluster support read and write operations.


B. Node Groups

Nodes are organized into groups for better replication control.

A group can represent a specific data center or geographic region.

Groups ensure data consistency within a specific scope.


C. Global Transaction Ordering

PGD uses a global transaction ID system to maintain consistency across all nodes.

This ensures transactions are applied in the same order across all nodes.


D. Conflict Resolution Mechanism

PGD automatically detects conflicts when the same row is updated in different nodes.

Supports different conflict resolution strategies, such as:

Last-Update-Wins

Transaction Timestamp-Based Resolution

Custom Conflict Handlers (user-defined rules)



E. Asynchronous Logical Replication

PGD uses logical replication to transfer data between nodes.

Unlike streaming replication (physical replication), logical replication allows:

Replicating specific tables.

Filtering or transforming data during replication.



F. High Availability & Failover

PGD can automatically detect node failures.

Uses a combination of automatic failover and self-healing mechanisms to recover lost nodes.

Can be integrated with Enterprise Failover Manager (EFM) for managing node failures.



---

2. PGD Cluster Architecture

A typical PGD deployment consists of multiple database nodes working together in an active-active or active-passive setup.

Active-Active Architecture

All nodes are writable and share the workload.

Ideal for geo-distributed applications where users need low-latency access.

Data consistency is maintained using global transaction ordering and conflict resolution.


Example Deployment

Users in the US-East region write to Node 1, while users in Europe write to Node 3.

PGD ensures data consistency across all nodes.


Active-Passive Architecture

One primary node handles writes, while replica nodes serve read queries.

Failover is automatic if the primary node fails.

Ideal for high-availability setups where read scaling is needed.


Example Deployment

Writes go to Node 1.

Reads can be load-balanced across Nodes 2 and 3.



---

3. PGD Workflow

1. Transaction Execution

A user writes data to any PGD node.

The transaction gets a global transaction ID.



2. Replication

Changes are asynchronously replicated to other nodes.

Conflict resolution is applied if needed.



3. Read and Write Distribution

Reads can be routed to any node.

Writes can be executed on any active node in an active-active setup.



4. Node Failure Handling

If a node goes down, PGD reroutes queries to another node.

The failed node automatically rejoins the cluster after recovery.





---

4. PGD Benefits

✅ True Active-Active Replication – All nodes are writable.
✅ Automatic Failover & High Availability – Self-healing cluster.
✅ Scalability – Distributed database architecture.
✅ Conflict Resolution – Multiple resolution strategies.
✅ Disaster Recovery – Geo-redundancy and self-healing.


---

5. When to Use PGD?

Global applications needing multi-region writes.

High availability setups with zero downtime.

Distributed workloads where users in different locations need local access.

Financial or IoT systems requiring real-time replication.


Would you like a step-by-step guide on installing and configuring PGD in your setup?


