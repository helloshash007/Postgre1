

length: 3,041 lines : 80
80
Ln:80 Col:68 Sel:0|0
${ kubectlcli) --kubeconfig=./kubeconfigfile describe -f ${MAN PATH}
${ kubectlCli) --kubeconfig-kubeconfigfile config view --flatten=true
$ {kubectlCli} --kubeconfig=./kubeconfigfile apply -f $(MAN PATH}
Windows (CR LF)
79
UTF-8
78
77
set tx
76
echo ${MAN PATH}
75
echo " Starting Deployment"
74
73
chmod 755 /home/glsappuser
72
71
${kubectlCli) --kubeconfig=./kubeconfigfile get nodes
70
I
69
export
KUBECONFIG=./kubeconfigfile
68
chmod 755 /home/glsappuser
67
${kubectlcli} config --kubeconfig=./kubeconfigfile use-context kubernetes
--auth-provider-arg-pip-certificate-authority-data=${pipcert)
66
--auth-provider-arg-refresh-token="$ciod refresh token" --auth-provider-arg-id-token="$ciod id
taken"
--auth-provider-arg-pip-issuer-url=$ {pipiSsuer) --auth-provider-arg-client-id-kubernetes
${kubectlCli) config --kubeconfig-. /kubeconfigfile set-credentials ${username" --auth-provider-ciod
--user=$ {uSername
65
64
--embed-certs=true
63
--certificate-authority=./tmp cert
${kubectlcli} config --kubeconfig-./kubeconfigfile set-context kubernetes --cluster-kubernetes
${kubectlCli} config --kubeconfig=./kubeconfig set-cluster kubernetes
${kubectlCli}
config set-cluster kubernetes
--server-https://userapi-apix. cloud
${ kubectlCli} config set-cluster kubernetes --server-https://userapi-apix.cloud
--server-"${apiseryer)"
62
61
echo "setting up kubernetes"
60
echo "tmp certificate generated"
omal text
file
59
3:38 PM
length:3,041 lines:80
Ln:80 Col:68 Sel:0|0
58
echo "${apicert.)" | base 64 -d > ./tmp cert
Windows (CR LF)
UTF-8
57
56
55
echo $ciod refresh token
ciod refresh token-$ ($ {jgCli} -r '.token. "refresh token"!<<< "Şciod temp")
54
echo $ciod id token
53
ciod id token=$ (${jgCli) -r .token. "id token"" <<< " $ciod temp")
52
51
echo $ciod temp
ciod temp-$ (curl -sk -u ${username) : ${passwprd} -X GET https://ciod.apix.cloud/apitoken/token/user)
50
echo pipcert.
49
pipcert-$ ($ {jgCli -r'. data.pipcert'<<< "Şciod certs")
48
echo $apicert.
47
apicert-$ ($
{jgcli} -r'.data.apicert' <<< "Şciod certs")
46
45
echo $ciod certs
ciod certs-$ (curl-sk -H "X-Vault-Token: $(hashi token) " -X GET ${vault url}/v1/Automation/ienkins)
44
echo "set Configure certs"
43
42
echo "
Enviornment Variable set'"
41
40
39
passwOrd="$ {passWord} "
user name="Ş{uSername}
38
37
36
ENVIRONMENT="${ dev1} "
SERVICE NAME="${service}"
DOCKER IMG="nexus:18080/abc-voda/${ service):$ {version)"
35
kubectlcli="/usr/bin/kubectl"
34
jqcli="/usr/bin/jg"
33
32
Vault Token="123dhdhdhdhdhdhdhhdhd"
hashi token="123dhdhdhdhdhdhdhhdhd"
31
vault url="https:/lgls-vault.apix.cloud"
30
pipissuer-"https://ciod.apix.cloud/auth/pip/k8spip"
9
apiserver="https:userapi-apix.cloud"
28
pipapi-"https://ciod.apix. cloud.hk/apitoken/token/user"
new 23 new 24 new 25 xnew 10 xnew 20 new 26 new 28 xnew 29 new 30 Xnew 31 Xansible fest playbookymi new 32 hew33

Qudhk/apitoken/token/user"
6
cat $(MAN PATH) /deploy. y*
5
4
sed -i 's/DOCKER IMG/nexus:8080\/abc-voda \/${service}:${version} /g' $ {MAN PATH} /deploy. ył
3
2
echo "update DockerImage in deploy. yaml file"
1
0
cat ${ MAN PATH) /deploy. y*
9
8
echo $MAN PATH
7
6
MAN PATH=$ {abc) /IKP Configurationş/$ (service) /manifests/dev
5
4
3
L2
git pull origin master
L1
git checkout master
L0
cd ${abc}
8
git clone https:/Z$Luser name}:${password} @github. Systems.com/$ (abc).git
7
6
echo "Git Pull Regquest"
5
4
set -e
3
# Exit immediately if a command exits with a non-zero status
2
1
#!/bin/bash
hew 19 3Snew 21 X|new 22 new 23 Xnew 24 Xnew 25 Xnew 10 Xnew 20 Xnew 26 Xew 28 Xnew 29 xnew 30 Xnew 31 Xansible
test playbook yml x

