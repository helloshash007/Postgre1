import psutil
import time

def get_postgres_pid():
    for proc in psutil.process_iter(['pid', 'name']):
        if 'postgres' in proc.info['name']:
            return proc.info['pid']
    return None

def get_postgres_cpu_utilization():
    postgres_pid = get_postgres_pid()
    if postgres_pid:
        postgres_process = psutil.Process(postgres_pid)
        postgres_cpu_percent = postgres_process.cpu_percent(interval=None)
        return postgres_cpu_percent
    else:
        return 0

def write_to_log(total_cpu_utilization, postgres_cpu_utilization, other_processes_cpu_utilization):
    with open("cpu_utilization_log.txt", "a") as log_file:
        log_file.write(f"Total CPU Utilization: {total_cpu_utilization}%\n")
        log_file.write(f"Postgres CPU Utilization: {postgres_cpu_utilization}%\n")
        log_file.write(f"Other Processes CPU Utilization: {other_processes_cpu_utilization}%\n")
        log_file.write("\n")

def main():
    while True:
        total_cpu_utilization = psutil.cpu_percent(interval=None, percpu=False)
        postgres_cpu_utilization = get_postgres_cpu_utilization()
        other_processes_cpu_utilization = total_cpu_utilization - postgres_cpu_utilization

        write_to_log(total_cpu_utilization, postgres_cpu_utilization, other_processes_cpu_utilization)

        time.sleep(20)

if __name__ == "__main__":
    main()
