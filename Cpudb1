import os
import datetime
import time
import subprocess
import csv
import psycopg2
import psutil  # For CPU utilization

# Configuration for log files and database connection
LOG_DIR = '/path/to/logs'
DB_PARAMS = {
    'host': 'your_postgres_host',
    'user': 'your_postgres_user',
    'password': 'your_postgres_password',
    'dbname': 'your_database'
}

# Get top processes by CPU usage
def get_top_processes():
    top_processes = subprocess.Popen(['ps', 'aux'], stdout=subprocess.PIPE)
    sorted_top_processes = subprocess.Popen(['sort', '-nrk', '3,3'], stdin=top_processes.stdout, stdout=subprocess.PIPE)
    top_10_processes = subprocess.Popen(['head', '-n', '10'], stdin=sorted_top_processes.stdout, stdout=subprocess.PIPE)
    top_processes.stdout.close()
    sorted_top_processes.stdout.close()
    top_processes_output = top_10_processes.communicate()[0].decode()
    
    processes = []
    for line in top_processes_output.splitlines():
        columns = line.split(None, 10)  # Split with a limit to avoid splitting query strings
        if len(columns) > 1:
            processes.append(columns)
    return processes

# Get PostgreSQL query by PID
def query_postgres_by_pid(pid):
    try:
        connection = psycopg2.connect(**DB_PARAMS)
        cursor = connection.cursor()

        query = """
        SELECT pid, query
        FROM pg_stat_activity
        WHERE pid = %s
        """
        
        cursor.execute(query, (pid,))
        result = cursor.fetchone()
        
        cursor.close()
        connection.close()
        
        if result:
            return result[1]  # Return the PostgreSQL query
        else:
            return "no query"
    
    except psycopg2.Error as e:
        with open(os.path.join(LOG_DIR, 'error_log.txt'), 'a') as error_log:
            error_log.write("Error querying PostgreSQL by PID:\n")
            error_log.write(str(e) + '\n')
            error_log.write("===============================\n\n")
        return None

# Log top processes by CPU utilization, PostgreSQL queries, and server CPU utilization
def log_top_processes():
    # Log for top 10 processes
    top_processes_file_path = os.path.join(LOG_DIR, f'top_processes_{datetime.datetime.now().date()}.csv')
    
    with open(top_processes_file_path, 'a', newline='') as csvfile:
        writer = csv.writer(csvfile)
        
        if csvfile.tell() == 0:  # Write header if file is empty
            writer.writerow(["Timestamp", "CPU Utilization", "USER", "PID", "CPU%", "MEM%", "VSZ", "RSS", "TTY", "STAT", "START", "TIME", "COMMAND"])
        
        # Get current timestamp and CPU utilization
        timestamp = datetime.datetime.now()
        total_cpu_utilization = psutil.cpu_percent()  # Get total CPU utilization
        
        # Get top 10 processes
        top_processes = get_top_processes()
        
        for process in top_processes:
            writer.writerow([timestamp, total_cpu_utilization] + process)  # Include CPU utilization and process details
    
    # Log for PostgreSQL queries by PID
    pid_queries_file_path = os.path.join(LOG_DIR, f'postgres_pid_log_{datetime.datetime.now().date()}.csv')
    
    with open(pid_queries_file_path, 'a', newline='') as csvfile:
        writer = csv.writer(csvfile)
        
        if csvfile.tell() == 0:  # Write header if file is empty
            writer.writerow(["Timestamp", "PID", "PostgreSQL Query"])
        
        # Get top PIDs from top processes
        pids = [process[1] for process in top_processes]  # Extract PIDs
        
        for pid in pids:
            postgres_query = query_postgres_by_pid(pid)
            writer.writerow([timestamp, pid, postgres_query if postgres_query else "no query"])

# Main function to run the logging loop every minute
def main():
    while True:
        log_top_processes()  # Log top processes, PostgreSQL queries, and server CPU utilization every minute
        time.sleep(60)  # Wait for 60 seconds before repeating

if __name__ == "__main__":
    main()
